import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import time
from data import *
from config import BOT_TOKEN, MAX_TOKENS, image_addresses
from gpt import GPT
import logging

bot = telebot.TeleBot(BOT_TOKEN)
gpt = GPT()

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt", filemode="w",
)


@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


def create_markup(button_labels):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for label in button_labels:
        markup.add(KeyboardButton(label))
    return markup


@bot.message_handler(commands=["start"])
def start_command(message):
    user_name = message.from_user.first_name
    messages_for_user = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_name}! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –°–∫–∞–∑–æ—á–Ω–∏–∫. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Å–∫–∞–∑–æ–≤ "
                         f"–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ "
                         f"–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º.")
    bot.send_photo(message.chat.id, image_addresses[0], messages_for_user,
                   reply_markup=create_markup(["–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º—Ç", "üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                                               "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"]))
    record_user_data(message)


@bot.message_handler(commands=["help"])
def help_command(message):
    message_text = message.text
    if message_text == "/help":
        bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.chat.id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                                      "–í–æ-–ø–µ—Ä–≤—ã—Ö, –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –µ—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞. "
                                      "–ü–µ—Ä–≤—ã–π - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, –Ω–æ –Ω–µ—É–¥–æ–±–Ω—ã–π –¥–ª—è "
                                      "–æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ—Ç. "
                                      "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –≤ –º–µ–Ω—é. –ò –≤—Ç–æ—Ä–æ–π "
                                      "—Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫. –ö –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º "
                                      "–±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏, –Ω—É–∂–Ω–æ –ª–∏—à—å –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –Ω–∏—Ö. "
                                      "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–¥–æ–±–µ–Ω –∏ –ø–æ–Ω—è—Ç–µ–Ω, –Ω–æ –º–µ–Ω–µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –æ–¥–∏–Ω "
                                      "–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å.\n\n –ö–æ–≥–¥–∞ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /solve_task - –±–æ—Ç "
                                      "–ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –ø—Ä–∏—Å–ª–∞—Ç—å –µ–º—É "
                                      "–ø—Ä–æ–º—Ç, —Ç–æ –µ—Å—Ç—å, —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ "
                                      "–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –æ–±—ã—á–Ω–æ —ç—Ç–æ "
                                      "–∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã. –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –≤–∞—à " 
                                      "—Ä–∞—Å—Å–∫–∞–∑;\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /continue –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª - –Ω—É–∂–Ω–∞ –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, "
                                      "–∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –¥–æ–ø–∏—Å–∞–ª —Ä–∞—Å—Å–∫–∞–∑. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å–∫–∞–∑ –¥–æ "
                                      "–∫–æ–Ω—Ü–∞, —Ç–æ –≤–≤–æ–¥–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /end_dialog –∏–ª–∏ "
                                      "–∫–Ω–æ–ø–∫–∞ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑¬ª - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –∏ –æ–Ω –∑–∞–±—ã–≤–∞–µ—Ç "
                                      "–≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /reset –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "
                                      "¬´–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞¬ª - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –∫ –Ω–∞—á–∞–ª—É.")


@bot.message_handler(commands=["about"])
def about_command(message):
    message_text = message.text
    if message_text == "/about":
        bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n–≠—Ç–æ—Ç –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ "
                                      "–Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞—Å—Å–∫–∞–∑—ã. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é "
                                      "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∏ –∏–¥–µ—è—Ö. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã "
                                      "—Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏–¥–µ–π.")


@bot.message_handler(commands=["solve_task"])
def solve_task_command(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç:")
    bot.register_next_step_handler(message, get_promt)


@bot.message_handler(commands=['end_dialog'])
@bot.message_handler(func=lambda message: "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑" in message.text)
def end_task_commands(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or user_data[user_id] == {}:
        bot.send_message(user_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç: ",
                         reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_promt)
        return
    bot.send_message(user_id, "–¢–µ–∫—É—â–∏–π —Ä–∞—Å—Å–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑: ", reply_markup=ReplyKeyboardRemove())
    record_user_data(message)
    bot.register_next_step_handler(message, get_promt)
    return


@bot.message_handler(commands=['continue'])
@bot.message_handler(func=lambda message: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" in message.text)
def continue_commands(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or user_data[user_id] == {}:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–º—Ç: ",
                         reply_markup=ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç, –∫–æ—Ç–æ—Ä—ã–π "
                                          "–±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑: ", reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_promt)
    return


@bot.message_handler(commands=['reset'])
@bot.message_handler(func=lambda message: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" in message.text)
def reset_command(message):
    user_id = str(message.from_user.id)
    if user_id not in user_data or user_data[user_id] == {}:
        bot.send_message(message.chat.id, "–í—ã –∏ —Ç–∞–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ")
        return
    record_user_data(message)
    bot.send_message(message.chat.id, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ . . .", reply_markup=ReplyKeyboardRemove())
    time.sleep(3)
    start_command(message)
    return


@bot.message_handler(content_types=["text"])
def user_first_response(message):
    message_text = message.text
    if message_text == "–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º—Ç":
        bot.send_message(message.chat.id, "–°—É–ø–µ—Ä!")
        time.sleep(1)
    elif message_text in ["üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "ü§ñ–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞"]:
        if message_text == "üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
            help_command(message)
            time.sleep(1)
        else:
            about_command(message)
            time.sleep(1)
        bot.send_message(message.chat.id, "–ü–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –∑–∞—Ç–µ–º")
        time.sleep(3)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –∫–Ω–æ–ø–∫—É!")
        return
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç:")
    bot.register_next_step_handler(message, get_promt)


@bot.message_handler()
def get_promt(message):
    message_text = message.text
    user_id = str(message.from_user.id)
    if message.content_type != "text":
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        bot.register_next_step_handler(message, get_promt)
        return

    user_promt = message_text
    saving_data(message, "user_request", user_promt)

    if gpt.count_tokens(user_promt) > MAX_TOKENS:
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        bot.register_next_step_handler(message, get_promt)
        return
    if (user_id not in user_data or user_data[user_id] == {}) and user_promt == "/continue":
        bot.send_message(user_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç: ")
        bot.register_next_step_handler(message, get_promt)
        return
    if user_id not in user_data or user_data[user_id] == {}:
        record_user_data(message)
        saving_data(message, "user_request", user_promt)

    bot.send_message(message.chat.id, "–†–∞—Å—Å–∫–∞–∑ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è",
                     reply_markup=ReplyKeyboardRemove())
    promt = gpt.make_promt(user_data[user_id])
    resp = gpt.send_request(promt)
    answer = gpt.process_resp(resp)
    user_data[user_id]['assistant_content'] += answer

    bot.send_message(message.chat.id, user_data[user_id]['assistant_content'],
                     reply_markup=create_markup(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å–∫–∞–∑", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]))


bot.polling()
